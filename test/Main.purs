module Test.Main where

import Prelude
import Data.Map as Map
import Effect (Effect)
import Effect.Aff (launchAff_)
import Effect.Class (liftEffect)
import Effect.Console (log)
import Main

main :: Effect Unit
main = launchAff_ do
  testTT "ar.ttb"
  testTT "as.ttb"
  testTT "awa.ttb"
--testTT "bg.ttb"
  testTT "bh.ttb"
  testTT "bn.ttb"
  testTT "bo.ttb"
  testTT "bra.ttb"
  testTT "brf.ttb"
  testTT "cs.ttb"
  testTT "cy.ttb"
  testTT "da-1252.ttb"
  testTT "da-lt.ttb"
  testTT "da.ttb"
  testTT "de.ttb"
  testTT "dra.ttb"
--testTT "el.ttb"
  testTT "en_CA.ttb"
  testTT "en_GB.ttb"
  testTT "en-nabcc.ttb"
  testTT "en.ttb"
  testTT "en_US.ttb"
  testTT "eo.ttb"
  testTT "es.ttb"
  testTT "et.ttb"
  testTT "fi.ttb"
  testTT "fr-2007.ttb"
  testTT "fr_CA.ttb"
  testTT "fr-cbifs.ttb"
  testTT "fr_FR.ttb"
  testTT "fr.ttb"
  testTT "fr-vs.ttb"
  testTT "ga.ttb"
  testTT "gd.ttb"
  testTT "gon.ttb"
  testTT "gu.ttb"
  testTT "he.ttb"
  testTT "hi.ttb"
  testTT "hr.ttb"
  testTT "hu.ttb"
  testTT "hy.ttb"
  testTT "is.ttb"
  testTT "it.ttb"
  testTT "kha.ttb"
  testTT "kn.ttb"
  testTT "kok.ttb"
  testTT "kru.ttb"
  testTT "lt.ttb"
  testTT "lv.ttb"
  testTT "mg.ttb"
  testTT "mi.ttb"
  testTT "ml.ttb"
  testTT "mni.ttb"
  testTT "mr.ttb"
  testTT "mt.ttb"
  testTT "mun.ttb"
  testTT "mwr.ttb"
  testTT "ne.ttb"
  testTT "new.ttb"
  testTT "nl_BE.ttb"
  testTT "nl_NL.ttb"
  testTT "nl.ttb"
  testTT "no-generic.ttb"
  testTT "no-oup.ttb"
  testTT "no.ttb"
  testTT "nwc.ttb"
  testTT "or.ttb"
  testTT "pa.ttb"
  testTT "pi.ttb"
  testTT "pl.ttb"
  testTT "pt.ttb"
  testTT "ro.ttb"
--testTT "ru.ttb"
  testTT "sa.ttb"
  testTT "sat.ttb"
  testTT "sd.ttb"
  testTT "se.ttb"
  testTT "sk.ttb"
  testTT "sl.ttb"
  testTT "sv-1989.ttb"
  testTT "sv-1996.ttb"
  testTT "sv.ttb"
  testTT "sw.ttb"
  testTT "ta.ttb"
  testTT "te.ttb"
  testTT "tr.ttb"
  testTT "uk.ttb"
  testTT "vi.ttb"
 where
  testTT n = table n >>= \{ chars, glyphs, aliases } ->
    liftEffect <<< log $
    n <> ": " <> show (Map.size chars) <> " chars, "
              <> show (Map.size glyphs) <> " glyphs, "
              <> show (Map.size aliases) <> " aliases"
